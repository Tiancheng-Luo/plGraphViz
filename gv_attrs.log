assert(gv_attr('Damping',[graph],[double],'0.99','0.0','neato only')).
assert(gv_attr('K',[cluster,graph],[double],'0.3','0','sfdp, fdp only')).
assert(gv_attr('URL',[cluster,edge,graph,node],[escString],_,'','svg, postscript, map only')).
assert(gv_attr('_background',[graph],[string],_,'','')).
assert(gv_attr(area,[cluster,node],[double],'1.0','>0','patchwork only')).
assert(gv_attr(arrowhead,[edge],[arrowType],normal,'','')).
assert(gv_attr(arrowsize,[edge],[double],'1.0','0.0','')).
assert(gv_attr(arrowtail,[edge],[arrowType],normal,'','')).
assert(gv_attr(bb,[graph],[rect],'','','write only')).
assert(gv_attr(bgcolor,[cluster,graph],[color,colorList],_,'','')).
assert(gv_attr(center,[graph],[bool],false,'','')).
assert(gv_attr(charset,[graph],[string],'"UTF-8"','','')).
assert(gv_attr(clusterrank,[graph],[clusterMode],local,'','dot only')).
assert(gv_attr(color,[cluster,edge,node],[color,colorList],black,'','')).
assert(gv_attr(colorscheme,[cluster,edge,graph,node],[string],'','','')).
assert(gv_attr(comment,[edge,graph,node],[string],'','','')).
assert(gv_attr(compound,[graph],[bool],false,'','dot only')).
assert(gv_attr(concentrate,[graph],[bool],false,'','')).
assert(gv_attr(constraint,[edge],[bool],true,'','dot only')).
assert(gv_attr(decorate,[edge],[bool],false,'','')).
assert(gv_attr(defaultdist,[graph],[double],'1+(avg. len)*sqrt(|V|)',epsilon,'neato only')).
assert(gv_attr(dim,[graph],[int],'2','2','sfdp, fdp, neato only')).
assert(gv_attr(dimen,[graph],[int],'2','2','sfdp, fdp, neato only')).
assert(gv_attr(dir,[edge],[dirType],'forward(directed)none(undirected)','','')).
assert(gv_attr(diredgeconstraints,[graph],[string,bool],false,'','neato only')).
assert(gv_attr(distortion,[node],[double],'0.0','-100.0','')).
assert(gv_attr(dpi,[graph],[double],'96.00.0','','svg, bitmap output only')).
assert(gv_attr(edgeURL,[edge],[escString],'','','svg, map only')).
assert(gv_attr(edgehref,[edge],[escString],'','','svg, map only')).
assert(gv_attr(edgetarget,[edge],[escString],_,'','svg, map only')).
assert(gv_attr(edgetooltip,[edge],[escString],'','','svg, cmap only')).
assert(gv_attr(epsilon,[graph],[double],'.0001 * # nodes(mode == KK).0001(mode == major)','','neato only')).
assert(gv_attr(esep,[graph],[addDouble,addPoint],'+3','','not dot')).
assert(gv_attr(fillcolor,[cluster,edge,node],[color,colorList],'lightgrey(nodes)black(clusters)','','')).
assert(gv_attr(fixedsize,[node],[bool,string],false,'','')).
assert(gv_attr(fontcolor,[cluster,edge,graph,node],[color],black,'','')).
assert(gv_attr(fontname,[cluster,edge,graph,node],[string],'"Times-Roman"','','')).
assert(gv_attr(fontnames,[graph],[string],'','','svg only')).
assert(gv_attr(fontpath,[graph],[string],'system-dependent','','')).
assert(gv_attr(fontsize,[cluster,edge,graph,node],[double],'14.0','1.0','')).
assert(gv_attr(forcelabels,[graph],[bool],true,'','')).
assert(gv_attr(gradientangle,[cluster,graph,node],[int],'','','')).
assert(gv_attr(group,[node],[string],'','','dot only')).
assert(gv_attr(headURL,[edge],[escString],'','','svg, map only')).
assert(gv_attr(head_lp,[edge],[point],'','','write only')).
assert(gv_attr(headclip,[edge],[bool],true,'','')).
assert(gv_attr(headhref,[edge],[escString],'','','svg, map only')).
assert(gv_attr(headlabel,[edge],[lblString],'','','')).
assert(gv_attr(headport,[edge],[portPos],center,'','')).
assert(gv_attr(headtarget,[edge],[escString],_,'','svg, map only')).
assert(gv_attr(headtooltip,[edge],[escString],'','','svg, cmap only')).
assert(gv_attr(height,[node],[double],'0.5','0.02','')).
assert(gv_attr(href,[cluster,edge,graph,node],[escString],'','','svg, postscript, map only')).
assert(gv_attr(id,[cluster,edge,graph,node],[escString],'','','svg, postscript, map only')).
assert(gv_attr(image,[node],[string],'','','')).
assert(gv_attr(imagepath,[graph],[string],'','','')).
assert(gv_attr(imagescale,[node],[bool,string],false,'','')).
assert(gv_attr(inputscale,[graph],[double],_,'','fdp, neato only')).
assert(gv_attr(label,[cluster,edge,graph,node],[lblString],'"\\N" (nodes)"" (otherwise)','','')).
assert(gv_attr(labelURL,[edge],[escString],'','','svg, map only')).
assert(gv_attr(label_scheme,[graph],[int],'0','0','sfdp only')).
assert(gv_attr(labelangle,[edge],[double],'-25.0','-180.0','')).
assert(gv_attr(labeldistance,[edge],[double],'1.0','0.0','')).
assert(gv_attr(labelfloat,[edge],[bool],false,'','')).
assert(gv_attr(labelfontcolor,[edge],[color],black,'','')).
assert(gv_attr(labelfontname,[edge],[string],'"Times-Roman"','','')).
assert(gv_attr(labelfontsize,[edge],[double],'14.0','1.0','')).
assert(gv_attr(labelhref,[edge],[escString],'','','svg, map only')).
assert(gv_attr(labeljust,[cluster,graph],[string],'"c"','','')).
assert(gv_attr(labelloc,[cluster,graph,node],[string],'"t"(clusters)"b"(root graphs)"c"(nodes)','','')).
assert(gv_attr(labeltarget,[edge],[escString],_,'','svg, map only')).
assert(gv_attr(labeltooltip,[edge],[escString],'','','svg, cmap only')).
assert(gv_attr(landscape,[graph],[bool],false,'','')).
assert(gv_attr(layer,[cluster,edge,node],[layerRange],'','','')).
assert(gv_attr(layerlistsep,[graph],[string],'","','','')).
assert(gv_attr(layers,[graph],[layerList],'','','')).
assert(gv_attr(layerselect,[graph],[layerRange],'','','')).
assert(gv_attr(layersep,[graph],[string],'" :\\t"','','')).
assert(gv_attr(layout,[graph],[string],'','','')).
assert(gv_attr(len,[edge],[double],'1.0(neato)0.3(fdp)','','fdp, neato only')).
assert(gv_attr(levels,[graph],[int],'MAXINT','0.0','sfdp only')).
assert(gv_attr(levelsgap,[graph],[double],'0.0','','neato only')).
assert(gv_attr(lhead,[edge],[string],'','','dot only')).
assert(gv_attr(lheight,[cluster,graph],[double],'','','write only')).
assert(gv_attr(lp,[cluster,edge,graph],[point],'','','write only')).
assert(gv_attr(ltail,[edge],[string],'','','dot only')).
assert(gv_attr(lwidth,[cluster,graph],[double],'','','write only')).
assert(gv_attr(margin,[cluster,graph,node],[double,point],'<device-dependent>','','')).
assert(gv_attr(maxiter,[graph],[int],'100 * # nodes(mode == KK)200(mode == major)600(fdp)','','fdp, neato only')).
assert(gv_attr(mclimit,[graph],[double],'1.0','','dot only')).
assert(gv_attr(mindist,[graph],[double],'1.0','0.0','circo only')).
assert(gv_attr(minlen,[edge],[int],'1','0','dot only')).
assert(gv_attr(mode,[graph],[string],major,'','neato only')).
assert(gv_attr(model,[graph],[string],shortpath,'','neato only')).
assert(gv_attr(mosek,[graph],[bool],false,'','neato only')).
assert(gv_attr(nodesep,[graph],[double],'0.25','0.02','')).
assert(gv_attr(nojustify,[cluster,edge,graph,node],[bool],false,'','')).
assert(gv_attr(normalize,[graph],[double,bool],false,'','not dot')).
assert(gv_attr(notranslate,[graph],[bool],false,'','neato only')).
assert(gv_attr('nslimit nslimit1',[graph],[double],'','','dot only')).
assert(gv_attr(ordering,[graph,node],[string],'','','dot only')).
assert(gv_attr(orientation,[node],[double],'0.0','360.0','')).
assert(gv_attr(orientation,[graph],[string],'','','')).
assert(gv_attr(outputorder,[graph],[outputMode],breadthfirst,'','')).
assert(gv_attr(overlap,[graph],[string,bool],true,'','not dot')).
assert(gv_attr(overlap_scaling,[graph],[double],'-4','-1.0e10','prism only')).
assert(gv_attr(overlap_shrink,[graph],[bool],true,'','prism only')).
assert(gv_attr(pack,[graph],[bool,int],false,'','')).
assert(gv_attr(packmode,[graph],[packMode],node,'','')).
assert(gv_attr(pad,[graph],[double,point],'0.0555 (4 points)','','')).
assert(gv_attr(page,[graph],[double,point],'','','')).
assert(gv_attr(pagedir,[graph],[pagedir],'BL','','')).
assert(gv_attr(pencolor,[cluster],[color],black,'','')).
assert(gv_attr(penwidth,[cluster,edge,node],[double],'1.0','0.0','')).
assert(gv_attr(peripheries,[cluster,node],[int],'shape default(nodes)1(clusters)','0','')).
assert(gv_attr(pin,[node],[bool],false,'','fdp, neato only')).
assert(gv_attr(pos,[edge,node],[point,splineType],'','','')).
assert(gv_attr(quadtree,[graph],[quadType,bool],normal,'','sfdp only')).
assert(gv_attr(quantum,[graph],[double],'0.0','0.0','')).
assert(gv_attr(rank,[subgraph],[rankType],'','','dot only')).
assert(gv_attr(rankdir,[graph],[rankdir],'TB','','dot only')).
assert(gv_attr(ranksep,[graph],[double,doubleList],'0.5(dot)1.0(twopi)','0.02','twopi, dot only')).
assert(gv_attr(ratio,[graph],[double,string],'','','')).
assert(gv_attr(rects,[node],[rect],'','','write only')).
assert(gv_attr(regular,[node],[bool],false,'','')).
assert(gv_attr(remincross,[graph],[bool],true,'','dot only')).
assert(gv_attr(repulsiveforce,[graph],[double],'1.0','0.0','sfdp only')).
assert(gv_attr(resolution,[graph],[double],'96.00.0','','svg, bitmap output only')).
assert(gv_attr(root,[graph,node],[string,bool],'<none>(graphs)false(nodes)','','circo, twopi only')).
assert(gv_attr(rotate,[graph],[int],'0','','')).
assert(gv_attr(rotation,[graph],[double],'0','','sfdp only')).
assert(gv_attr(samehead,[edge],[string],'','','dot only')).
assert(gv_attr(sametail,[edge],[string],'','','dot only')).
assert(gv_attr(samplepoints,[node],[int],'8(output)20(overlap and image maps)','','')).
assert(gv_attr(scale,[graph],[double,point],'','','not dot')).
assert(gv_attr(searchsize,[graph],[int],'30','','dot only')).
assert(gv_attr(sep,[graph],[addDouble,addPoint],'+4','','not dot')).
assert(gv_attr(shape,[node],[shape],ellipse,'','')).
assert(gv_attr(shapefile,[node],[string],'','','')).
assert(gv_attr(showboxes,[edge,graph,node],[int],'0','0','dot only')).
assert(gv_attr(sides,[node],[int],'4','0','')).
assert(gv_attr(size,[graph],[double,point],'','','')).
assert(gv_attr(skew,[node],[double],'0.0','-100.0','')).
assert(gv_attr(smoothing,[graph],[smoothType],'"none"','','sfdp only')).
assert(gv_attr(sortv,[cluster,graph,node],[int],'0','0','')).
assert(gv_attr(splines,[graph],[bool,string],'','','')).
assert(gv_attr(start,[graph],[startType],'','','fdp, neato only')).
assert(gv_attr(style,[cluster,edge,graph,node],[style],'','','')).
assert(gv_attr(stylesheet,[graph],[string],'','','svg only')).
assert(gv_attr(tailURL,[edge],[escString],'','','svg, map only')).
assert(gv_attr(tail_lp,[edge],[point],'','','write only')).
assert(gv_attr(tailclip,[edge],[bool],true,'','')).
assert(gv_attr(tailhref,[edge],[escString],'','','svg, map only')).
assert(gv_attr(taillabel,[edge],[lblString],'','','')).
assert(gv_attr(tailport,[edge],[portPos],center,'','')).
assert(gv_attr(tailtarget,[edge],[escString],_,'','svg, map only')).
assert(gv_attr(tailtooltip,[edge],[escString],'','','svg, cmap only')).
assert(gv_attr(target,[cluster,edge,graph,node],[escString,string],_,'','svg, map only')).
assert(gv_attr(tooltip,[cluster,edge,node],[escString],'','','svg, cmap only')).
assert(gv_attr(truecolor,[graph],[bool],'','','bitmap output only')).
assert(gv_attr(vertices,[node],[pointList],'','','write only')).
assert(gv_attr(viewport,[graph],[viewPort],'','','')).
assert(gv_attr(voro_margin,[graph],[double],'0.05','0.0','not dot')).
assert(gv_attr(weight,[edge],[int,double],'1','0(dot,twopi)1(neato,fdp)','')).
assert(gv_attr(width,[node],[double],'0.75','0.01','')).
assert(gv_attr(xdotversion,[graph],[string],'','','xdot only')).
assert(gv_attr(xlabel,[edge,node],[lblString],'','','')).
assert(gv_attr(xlp,[edge,node],[point],'','','write only')).
assert(gv_attr(z,[node],[double],'0.0','-MAXFLOAT-1000','')).
